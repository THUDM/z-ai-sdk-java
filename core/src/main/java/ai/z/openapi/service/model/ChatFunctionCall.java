package ai.z.openapi.service.model;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import ai.z.openapi.service.deserialize.ChatFunctionCallDeserializer;
import ai.z.openapi.service.deserialize.MessageDeserializeFactory;
import lombok.Getter;

import java.util.Iterator;

/**
 * Represents a function call generated by the chat model. This class contains the
 * function name and arguments that the model wants to invoke.
 */
@Getter
@JsonDeserialize(using = ChatFunctionCallDeserializer.class)
public class ChatFunctionCall extends ObjectNode {

	/**
	 * Name of the function that the model wants to call.
	 */
	String name;

	/**
	 * JSON-formatted function call arguments generated by the model. Note that the JSON
	 * generated by the model is not always valid and may contain parameters not defined
	 * in the function schema. Please validate the arguments in your code before calling
	 * the function.
	 */
	JsonNode arguments;

	public ChatFunctionCall() {
		super(JsonNodeFactory.instance);
	}

	public ChatFunctionCall(ObjectNode objectNode) {
		super(JsonNodeFactory.instance);
		ObjectMapper objectMapper = MessageDeserializeFactory.defaultObjectMapper();
		if (objectNode.get("name") != null) {
			this.setName(objectNode.get("name").asText());
		}
		else {
			this.setName(null);
		}
		if (objectNode.get("arguments") != null) {
			this.setArguments(objectNode.get("arguments"));
		}
		else {
			this.setArguments(null);
		}

		Iterator<String> fieldNames = objectNode.fieldNames();

		while (fieldNames.hasNext()) {
			String fieldName = fieldNames.next();

			JsonNode field = objectNode.get(fieldName);
			this.set(fieldName, field);
		}

	}

	public void setName(String name) {
		this.name = name;
		this.put("name", name);
	}

	public void setArguments(JsonNode arguments) {
		this.arguments = arguments;
		this.set("arguments", arguments);
	}

}
